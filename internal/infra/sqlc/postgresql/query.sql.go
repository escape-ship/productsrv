// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package postgresql

import (
	"context"
	"database/sql"
)

const getProduct = `-- name: GetProduct :many
SELECT id, name, categories, price, inventory, imageUrl, created_at, updated_at
FROM products.product
WHERE $1 = 0 OR id = $1
`

func (q *Queries) GetProduct(ctx context.Context, dollar_1 interface{}) ([]ProductsProduct, error) {
	rows, err := q.db.QueryContext(ctx, getProduct, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductsProduct
	for rows.Next() {
		var i ProductsProduct
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Categories,
			&i.Price,
			&i.Inventory,
			&i.Imageurl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByName = `-- name: GetProductByName :one
SELECT id, name, categories, price, inventory, imageUrl, created_at, updated_at
FROM products.product
WHERE name = $1
`

func (q *Queries) GetProductByName(ctx context.Context, name string) (ProductsProduct, error) {
	row := q.db.QueryRowContext(ctx, getProductByName, name)
	var i ProductsProduct
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Categories,
		&i.Price,
		&i.Inventory,
		&i.Imageurl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const postProducts = `-- name: PostProducts :exec
INSERT INTO products.product (name, categories, price, inventory, imageUrl)
VALUES ($1, $2, $3, $4, $5)
`

type PostProductsParams struct {
	Name       string         `json:"name"`
	Categories string         `json:"categories"`
	Price      int64          `json:"price"`
	Inventory  int32          `json:"inventory"`
	Imageurl   sql.NullString `json:"imageurl"`
}

func (q *Queries) PostProducts(ctx context.Context, arg PostProductsParams) error {
	_, err := q.db.ExecContext(ctx, postProducts,
		arg.Name,
		arg.Categories,
		arg.Price,
		arg.Inventory,
		arg.Imageurl,
	)
	return err
}
