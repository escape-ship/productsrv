// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgresql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, base_price AS price, image_url, category, options, created_at, updated_at
FROM products.products
WHERE id = $1
`

type GetProductByIDRow struct {
	ID          uuid.UUID             `json:"id"`
	Name        string                `json:"name"`
	Description sql.NullString        `json:"description"`
	Price       int64                 `json:"price"`
	ImageUrl    sql.NullString        `json:"image_url"`
	Category    sql.NullString        `json:"category"`
	Options     pqtype.NullRawMessage `json:"options"`
	CreatedAt   sql.NullTime          `json:"created_at"`
	UpdatedAt   sql.NullTime          `json:"updated_at"`
}

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (GetProductByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i GetProductByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.ImageUrl,
		&i.Category,
		&i.Options,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductByName = `-- name: GetProductByName :one
SELECT id, name, base_price AS price, image_url, category,options, created_at, updated_at
FROM products.products
WHERE name = $1
`

type GetProductByNameRow struct {
	ID        uuid.UUID             `json:"id"`
	Name      string                `json:"name"`
	Price     int64                 `json:"price"`
	ImageUrl  sql.NullString        `json:"image_url"`
	Category  sql.NullString        `json:"category"`
	Options   pqtype.NullRawMessage `json:"options"`
	CreatedAt sql.NullTime          `json:"created_at"`
	UpdatedAt sql.NullTime          `json:"updated_at"`
}

func (q *Queries) GetProductByName(ctx context.Context, name string) (GetProductByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getProductByName, name)
	var i GetProductByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.ImageUrl,
		&i.Category,
		&i.Options,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, base_price AS price, image_url, category,options, created_at, updated_at
FROM products.products
`

type GetProductsRow struct {
	ID        uuid.UUID             `json:"id"`
	Name      string                `json:"name"`
	Price     int64                 `json:"price"`
	ImageUrl  sql.NullString        `json:"image_url"`
	Category  sql.NullString        `json:"category"`
	Options   pqtype.NullRawMessage `json:"options"`
	CreatedAt sql.NullTime          `json:"created_at"`
	UpdatedAt sql.NullTime          `json:"updated_at"`
}

func (q *Queries) GetProducts(ctx context.Context) ([]GetProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.ImageUrl,
			&i.Category,
			&i.Options,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const postProducts = `-- name: PostProducts :exec
INSERT INTO products.products (name, description, base_price, image_url, category, options)
VALUES ($1, $2, $3, $4, $5, $6)
`

type PostProductsParams struct {
	Name        string                `json:"name"`
	Description sql.NullString        `json:"description"`
	BasePrice   int64                 `json:"base_price"`
	ImageUrl    sql.NullString        `json:"image_url"`
	Category    sql.NullString        `json:"category"`
	Options     pqtype.NullRawMessage `json:"options"`
}

func (q *Queries) PostProducts(ctx context.Context, arg PostProductsParams) error {
	_, err := q.db.ExecContext(ctx, postProducts,
		arg.Name,
		arg.Description,
		arg.BasePrice,
		arg.ImageUrl,
		arg.Category,
		arg.Options,
	)
	return err
}
